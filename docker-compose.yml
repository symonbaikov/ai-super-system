version: "3.9"

x-backend-env: &backend-env
  REDIS_URL: redis://redis:6379/0
  DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-parser}:${POSTGRES_PASSWORD:-parser}@postgres:5432/${POSTGRES_DB:-super_parser}
  APIFY_BASE_URL: https://api.apify.com
  APIFY_TOKEN: ${APIFY_TOKEN:-replace-me}
  APIFY_ACTOR_ID: ${APIFY_ACTOR_ID:-team~parserActor}
  GROQ_API_KEY: ${GROQ_API_KEY:-replace-me}
  GROQ_MODEL: mixtral-8x7b
  HELIUS_WEBHOOK_SECRET: ${HELIUS_WEBHOOK_SECRET:-replace-me}
  ALERTS_SIGNATURE_SECRET: ${ALERTS_SIGNATURE_SECRET:-replace-me}
  AI_CORE_CONFIG_DIR: ai_core/configs

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-parser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-parser}
      POSTGRES_DB: ${POSTGRES_DB:-super_parser}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-parser} -d ${POSTGRES_DB:-super_parser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [internal]

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "20", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [internal]

  ai-core:
    build:
      context: .
      dockerfile: ai_core/Dockerfile
    environment:
      AI_CORE_CONFIG_DIR: ai_core/configs
    volumes:
      - ai_core_cache:/root/.cache/huggingface
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9500/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks: [internal]

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: api
    environment:
      <<: *backend-env
      APIFY_TOKEN: ${APIFY_TOKEN:-replace-me}
      GROQ_API_KEY: ${GROQ_API_KEY:-replace-me}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - internal

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: worker
    environment:
      NODE_ENV: production
      PORT: 8811
      METRICS_PORT: 9110
      REDIS_URL: redis://redis:6379/0
      GOLIB_URL: http://ai-core:9500
      GOLIB_KEY: ${GROQ_API_KEY:-replace-me}
      HELIUS_API_KEY: ${HELIUS_API_KEY:-replace-me}
      RPC_URL: ${RPC_URL:-https://example.quicknode.com}
      QUICKNODE_URL: ${QUICKNODE_URL:-https://example.quicknode.com}
      FASTAPI_URL: http://api:9000
    depends_on:
      redis:
        condition: service_healthy
      ai-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8811/status || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - internal

  parser-http:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: worker
    command: ["node", "src/parsers/http-server.js"]
    environment:
      NODE_ENV: production
      PARSER_HTTP_PORT: 9100
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - internal

  parser-browser:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: worker
    command: ["node", "src/parsers/browser-runner.js"]
    environment:
      NODE_ENV: production
      PARSER_BROWSER_POLL_MS: 10000
    depends_on:
      api:
        condition: service_started
    networks:
      - internal

  web:
    build:
      context: web
      dockerfile: Dockerfile
      args:
        VITE_API_URL: https://${API_FQDN:-api.localhost}
        VITE_STREAM_URL: https://${API_FQDN:-api.localhost}/stream
    depends_on:
      api:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - internal

  proxy:
    image: caddy:2.8.4-alpine
    ports:
      - "80:80"
      - "443:443"
    environment:
      APP_FQDN: ${APP_FQDN:-app.localhost}
      API_FQDN: ${API_FQDN:-api.localhost}
      AI_FQDN: ${AI_FQDN:-ai.localhost}
      ACME_AGREE: "true"
      EMAIL: ${CADDY_ADMIN_EMAIL:-admin@example.com}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      web:
        condition: service_started
      api:
        condition: service_started
      ai-core:
        condition: service_started
    networks:
      - internal
      - edge

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
  ai_core_cache:

networks:
  internal:
    driver: bridge
  edge:
    driver: bridge
